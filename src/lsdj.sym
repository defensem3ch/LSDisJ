;; 00:0000 Most RSTs are unused
00:0000 rst_00
00:0001 .data:0007
00:0008 rst_08
00:0008 .data:0008
00:0010 rst_10
00:0018 rst_18
00:0020 rst_20
00:0020 .data:0008
00:0028 rst_28
00:0028 .data:0008
00:0030 rst_30
00:0030 .data:0008
00:0038 rst_38
00:003c .data:0004

00:0040 vblank_interrupt
00:0043 .data:0005
00:0048 lcdc_interrupt
00:004f .data:0001
00:0050 timer_overflow_interrupt
00:0053 .data:0005
00:0058 serial_transfer_complete_interrupt
00:005b .data:0005
00:0060 joypad_transition_interrupt
00:0061 jump_00_0061
00:0061 .code:0008
;; 00:0066 Jumps to 01:731b
00:0069 .data:0097

00:0100 Boot

00:0104 HeaderLogo
00:0134 HeaderTitle
00:013f HeaderManufacturerCode
;; 00:0143 Game supports CGB functions, but works on old gameboys also.
00:0143 HeaderCGBFlag
00:0144 HeaderNewLicenseeCode
;; 00:0146 No SGB functions (Normal Gameboy or CGB only game)
00:0146 HeaderSGBFlag
;; 00:0147 MBC5+RAM+BATTERY, ROM Size: 1 MB, RAM Size: 128 KB
00:0147 HeaderCartridgeType
00:0148 HeaderROMSize
00:0149 HeaderRAMSize
;; 00:014a Destination is Japanese
00:014a HeaderDestinationCode
00:014b HeaderOldLicenseeCode
00:014c HeaderMaskROMVersion
;; 00:014d Checksums automatically calculated with rgbfix
00:014d HeaderComplementCheck
00:014e HeaderGlobalChecksum

00:0150 jump_header_end
;; 00:0151 Save registers for later
;; 00:0151 A is used to detect GB model, B is unused
;; 00:0155 Init stack address
;; 00:0158 Clear WRAM1
00:015f .jump_clear_wram1_loop
;; 00:0166 Clear HRAM
00:016b .jump_clear_hram_loop
;; 00:016f Retrieve and store boot values from earlier

;; 00:017a Start initializing registers
;; 00:017b Reset scroll Y/X
;; 00:017f Reset LCDC status

;; 00:0181 Reset window position
;; 00:0181 $07 is the left edge of the screen

;; 00:0187 Reset palettes
;; 00:0187 0xe4 is "11 10 01 00" in binary
;; 00:0187 0x1b is "00 01 10 11" in binary

;; 00:0191 Reset LCD controller
;; 00:0191 0xc0 sets bits 6 and 7
;; 00:0191 This turns on the LCDC and sets the window tilemap to 0x9c00

;; 00:019c Start serial transfer
;; 00:019c 0x66 is the initial value sent
;; 00:019c 0x80 starts the transfer

00:01ac .data:01e5

;; 00:04d9 Exec dynamic instructions from call_init_samples

00:07fe .data:00dc
00:08da wav_instr_play_type_strings
00:08da .text:0024
00:08fe .data:0099

00:0a48 note_labels
00:0a48 .text:0005
00:0a4d .text:0036
00:0a71 .text:0036
00:0a95 .text:0036
00:0ab9 .text:0036
00:0add .text:0036
00:0b01 .text:0036
00:0b25 .text:0036
00:0b49 .text:0036
00:0b6d .text:0034
00:0b8f .data:00d9

;; 00:0f80 Calls call_init_samples at 1b:7393
;; 00:0f8c Calls call_set_lsdj_palette at 01:47fc
;; 00:0f8f Calls call_clear_oam_vram at 01:7801
;; 00:0fb5 Calls 01:452f
;; 00:0fbe Calls 00:3975
;; 00:0fd7 Calls 01:4152
;; 00:100d Calls 01:429c
;; 00:1010 Calls 01:45bb
;; 00:101c Calls 1c:4057
;; 00:102e Calls 01:44f8
;; 00:1040 Calls 1c:47b1

;; 00:107b Calls 07:6a6a
;; 00:10f2 Calls 02:6d1b
;; 00:110e Calls 01:4863
;; 00:115f Calls 01:48cf
;; 00:1186 Calls 1f:49d5
;; 00:11c1 Calls 02:7b04
;; 00:1234 Calls 04:4582
;; 00:125d Calls 05:4517
;; 00:1286 Calls 05:4517
;; 00:12be Calls 1d:4f32

00:1466 .data:0008

00:1480 call_setup_sound
00:1492 .jump_get_sound_en_dmg
00:149d .jump_dmg_sound_off
00:149e .jump_dmg_sound_on
00:14a5 .jump_get_sound_en_cgb
00:14a9 .jump_disable_sound

;; 00:14cb Call 01:6ea5
;; 00:14d9 Call 1c:40f2
;; 00:150a Call 1d:5d43
;; 00:1559 Call 06:50e8
;; 00:157e Call 01:4b54
;; 00:158f Call 01:4c08
;; 00:1592 Call 01:7221
;; 00:15a8 Call 01:7239

00:1616 call_00_1616

00:1dea .data:0002

;; 00:1fff Call 02:5d38
;; 00:207c Call 02:7b04

;; 00:20a0 Call 02:7b04
;; 00:20a3 Call 02:7b04

00:2084 .data:0005

;; 00:22ca Call 02:6fa0
;; 00:22da Call 01:6ea5

;; 00:2361 Call 02:4e02

;; 00:248f Call 02:6f8d
;; 00:24ae Call 1b:5b96
;; 00:24da Call 02:541e

;; 00:2567 Call 1c:63b5

;; 00:2676 Call 01:50dc
;; 00:269f Call 05:4000
;; 00:26b4 Call 1e:4000
;; 00:2730 Call 04:48f4
;; 00:273f Call 1d:4124
;; 00:274e Call 06:5d91
;; 00:275d Call 07:449f
;; 00:276c Call 05:48bd
;; 00:277b Call 03:4dc9
;; 00:278d Call 06:4d70
;; 00:279c Call 1b:5c33
;; 00:27ab Call 1d:632f
;; 00:27bd Call 06:425c
;; 00:27cc Call 1c:58ad
;; 00:27db Call 1b:48ff

;; 00:283a Call 1f:62aa
;; 00:2849 Call 1d:435f
;; 00:2858 Call 05:4ade
;; 00:2867 Call 06:5f28
;; 00:2876 Call 07:452e
;; 00:28a7 Call 04:7908
;; 00:28aa Call 04:7af4
;; 00:28be Call 04:7b6b

;; 00:29bc Call 02:5ef3
;; 00:29dd Call 1f:7645
;; 00:2a6e Call 02:5ef3
;; 00:2aca Call 02:5ef3
;; 00:2ad8 Call 1f:7645
;; 00:2b8a Call 02:5ef3
;; 00:2c04 Call 02:5ef3
;; 00:2c1b Call 1f:7645

;; 00:2caa Call 04:558d
;; 00:2cba Call 1d:4585
;; 00:2cca Call 06:606c
;; 00:2cda Call 07:49b3
;; 00:2cea Call 05:4de6
;; 00:2cfa Call 03:5470
;; 00:2d0a Call 1b:506f
;; 00:2d1a Call 06:551d
;; 00:2d2a Call 1b:5f2f
;; 00:2d3a Call 1d:6f27
;; 00:2d4d Call 06:43d7
;; 00:2d5d Call 1c:5abc
;; 00:2d6d Call 1b:4a19

00:2dc5 .data:0003

00:2e14 channel_labels
00:2e14 .text:0010

00:2e74 .data:000c

00:2f26 .data:000f

00:2f63 call_00_2f63

;; 00:3390 This subroutine enables the speed switch (CGB only)
00:3390 call_key1_en
;; 00:3394 Already set, return early
;; 00:3398 Prepare to enable speed switch
;; 00:33a1 Enable speed switch
;; 00:33a7 Restore state

;; 00:33df This subroutine disables the LCD controller when safe
00:33df call_disable_lcdc
;; 00:33e3 Wait for scanline to get into a safe position
;; 00:33e3 0x90 is the blank period
00:33e3 .jump_wait_for_vblank_1
00:33e9 .jump_wait_for_vblank_2
;; 00:33ef Disable LCDC
;; 00:33ef 0x7f disables every bit but 7

00:342e .data:000a

00:34ea .data:0011

;; 00:3771 This subroutine writes SP+4 bytes from address SP+2 into address SP
00:3771 call_write_bytes
;; 00:3772 Load stack into registers
00:3785 .jump_set_mem_loop
00:3788 .jump_set_mem_loop_check
;; 00:378e Return SP in DE

;; 00:37db This subroutine multiplies the bytes in SP and stores the result in E
00:37db call_multiply_sp

;; 00:37e7 This subroutine sets DE to (SP + (SP+1)) * ((SP+2) | (SP+3))
00:37e7 call_multiply_sum_or_sp

;; 00:37f8 This subroutine multiplies C by E and stores the result in L
00:37fb call_multiply_c_e
;; 00:37fb This subroutine sets H to (B + C) * (D | E) and L to C * (D | E)
00:37fb call_multiply_sum_or

00:3811 call_set_background_palettes
;; 00:3811 This function sets background palettes (not to be confused with LSDj palettes)
;; 00:3811 It sets palettes to the bytes stored at the address at SP+2, offset by the background palette index
;; 00:3811 It sets palettes up to (SP+1) * 4 and starts at (SP) * 4
;; 00:3815 BC = *(SP+2)
;; 00:3818 DE = *(SP)
;; 00:381c D = (D + E) * 4
;; 00:3822 E *= 4
00:3827 .jump_loop
;; 00:3827 Wait for VRAM access to be safe
;; 00:382d Set background palette index
;; 00:3830 Set background palette value
;; 00:3833 Loop


00:3ec4 .bank_00_padding
00:3ec4 .data:013c

01:4000 call_set_object_palettes
;; 01:4000 This function sets object palettes
;; 01:4000 See call_set_background_palettes
01:4016 .jump_loop

01:4115 .data:0010

01:4222 cart_test_strings
01:4222 .text:000f
01:4231 .text:0007
01:4238 .text:0004
01:423c .text:0006
01:4242 .text:0012
01:4254 .text:0010
01:4264 .text:0008
01:426c .text:0004
01:4270 .text:0006
01:4276 .text:0012
01:4288 .text:0014

01:452f call_01_452f

01:472b .data:0005

01:47fc call_set_lsdj_palette
;; 01:47fc This subroutine sets the background/object palettes to the colors in the currently selected LSDj palette
;; 01:47fc This subroutine sets the background/object palettes to the colors in the currently selected LSDj palette
;; 01:4806 Disable LCDC
;; 01:480c Set background colors to values starting at (CURRENT_PALETTE_NUM) * 0x28 + 0x5380
;; 01:480c Each palette is 0x28 long and palettes start at 0x5380
;; 01:4834 Set object palettes
;; 01:4842 Cleanup

01:4d6e pitch_shift_type_strings
01:4d6e .text:0005
01:4d73 .text:0005
01:4d78 .text:0005
01:4d7d .text:0005

01:4da0 .data:0008

01:484d .jump_handle_dmg
;; 01:484d Set normal (11 10 01 00) or inverted (00 01 10 11) palette
01:485a .jump_set_normal_dmg_palette
01:485c .jump_set_dmg_palette
01:4861 .jump_handle_dmg_end

01:51d0 .data:01b0

01:5380 palette_1_content
01:5380 .data:0028
01:53a8 palette_2_content
01:53a8 .data:0028
01:53d0 palette_3_content
01:53d0 .data:0028
01:53f8 palette_4_content
01:53f8 .data:0028
01:5420 palette_5_content
01:5420 .data:0028
01:5448 palette_6_content
01:5448 .data:0028

01:5470 .data:1248

01:6915 command_help_strings
01:6915 .text:0030
01:6945 .text:000a
01:694f .text:002d
01:697c .text:0023
01:699f .text:003b
01:69da .text:0048
01:6a22 .text:0027
01:6a49 .text:0016
01:6a5f .text:0088
01:6ae7 .text:0020
01:6b07 .text:0034
01:6b3b .text:0016
01:6b51 .text:0062
01:6bb3 .text:004b
01:6bfe .text:001b
01:6c19 .text:0059
01:6c72 .text:005c
01:6cce .text:001b
01:6ce9 .text:002d
01:6d16 .text:0068
01:6d7e .text:0032
01:6db0 .text:0019
01:6dc9 .text:0008
01:6dd1 .text:0023
01:6df4 .text:0048

01:6e3c .data:0014
01:6e50 .data:0014
01:6e64 .data:0012

01:6e76 screen_name_strings
01:6e76 .text:002f

01:6e76 error_strings
01:6f95 .text:0031
01:6fd0 .text:0014
01:6fee .text:0015

;; 01:712f Assumed to be jump table
01:712f .data:0028

01:7157 sweep_help_strings
01:7157 .text:0049
01:71a0 .text:002e
01:71ce .text:0011

01:7315 .data:0006

01:731b jump_01_731b

01:754b crash_help_strings
01:754b .text:000c
01:7557 .text:0011
01:7568 .text:0010
01:7578 .text:0012
01:758a .text:0025

01:7801 call_clear_oam_vram
;; 01:7801 This subroutine sets OAM and the first 0x30 bytes of VRAM to 0
;; 01:7805 Set current OAM address to the start of OAM memory (0xfe00) +2
01:780d .jump_set_oam_loop
;; 01:780d Set value at SP to word at current OAM address
;; 01:7814 Set value at SP+1 to OAM value (0)
;; 01:781b Set value at SP+2 to 0x0000
;; 01:7820 Check if the end of OAM memory (0xfebf) has been reached
;; 01:782f Check if value at SP+1 is 0x0000 (always true) and exit loop
01:783b .jump_set_oam
;; 01:783b Write 0 to the current OAM address
;; 01:784b Increment and loop
01:7853 .jump_set_oam_end
01:7856 .jump_init_set_vram_loop
;; 01:7856 Set current VRAM address to the start of VRAM memory (0x8000)
01:785e .jump_set_vram_loop
;; 01:785e Set value at SP to word at current OAM address
;; 01:7865 Set value at SP+1 to OAM value (0)
;; 01:786c Set value at SP+2 to 0x0000
;; 01:7871 Check if the last address has been reached (only sets first 0x30 addresses)
;; 01:7880 Check if value at SP+1 is 0x0000 (always true) and exit loop
01:788c .jump_set_vram
;; 01:788c Write 0 to the current VRAM address
;; 01:789c Increment and loop
01:78a4 .jump_set_vram_end
01:78a7 .jump_set_sprites
;; 01:78a7 Set sprites at y pos 0x68 and x pos 0x90 through 0xa0 to sprites 0 through 2
;; 01:78a7 Since the sprites are cleared, it's currently unknown what this does
;; 01:790f Cleanup

01:79b9 call_oam_vram_safe_write
;; 01:79b9 This subroutine sets the address at SP to the value at SP+2 when OAM is not in use and VRAM is safe to use, trying again if it fails
01:79c0 .jump_wait_for_oam_vram
;; 01:79c9 OAM used by system while writing or not safe to write to VRAM, try again

01:79ce .data:0632

02:42e5 .data:0200

02:6d6c .data:006c
02:6dd8 .data:006c

02:7e69 .data:0010

02:7f14 .data:00ec

03:4015 instrument_strings
03:4015 .text:0006
03:401b .text:0005
03:4020 .data:0004
03:4024 .text:0005
03:4029 .data:0004
03:402d .text:0005
03:4032 .data:0016
03:4048 .text:0005
03:404d .data:0004
03:4051 .text:0007
03:4058 .data:0002
03:405a .text:0007
03:4061 .data:0002
03:4063 .text:0006
03:4069 .data:0003
03:406c .text:0006
03:4072 .data:0003
03:4075 .text:0008
03:407d .data:0001
03:407e .text:0009
03:4087 .text:0009
03:4090 .text:0009
03:4099 .text:0006
03:409f .data:001e
03:40bd .text:0005
03:40c2 .data:0004
03:40c6 .text:0005
03:40cb .data:0004
03:40cf .text:0007
03:40d6 .data:000b
03:40e1 .text:0006
03:40e7 .data:0003
03:40ea .text:0008
03:40f2 .data:0001
03:40f3 .text:0009
03:40fc .text:0009
03:4105 .text:0006
03:410b .data:0003
03:410e .text:0005
03:4113 .data:0004
03:4117 .text:0006
03:411d .data:0003
03:4120 .text:0007
03:4127 .data:0002
03:4129 .text:0009
03:4132 .text:0006
03:4138 .data:0027
03:415f .text:0005
03:4164 .data:0004
03:4168 .text:0005
03:416d .data:0004
03:4171 .text:0004
03:4175 .data:000e
03:4183 .text:0007
03:418a .data:000b
03:4195 .text:0006
03:419b .data:0003
03:419e .text:0009
03:41a7 .text:0007
03:41ae .data:000b
03:41b9 .text:0004
03:41bd .data:000e
03:41cb .text:0005
03:41d0 .data:000d
03:41dd .text:0006
03:41e3 .data:0003
03:41e6 .text:0005
03:41eb .data:0004
03:41ef .text:0006
03:41f5 .data:000c
03:4201 .text:0005
03:4206 .data:0004
03:420a .text:0005
03:420f .data:0004
03:4213 .text:0005
03:4218 .data:0016
03:422e .text:0007
03:4235 .data:0002
03:4237 .text:0007
03:423e .data:0002
03:4240 .text:0006
03:4246 .data:0003
03:4249 .text:0007
03:4250 .data:0002
03:4252 .text:0009
03:425b .data:0009
03:4264 .text:0006
03:426a .data:0003

03:426d .data:00ca

03:4517 .data:0010

03:47aa instrument_screen_title_string
03:47aa .text:0007

03:47e4 .text:000f

03:4afa .data:0003

03:4bbb .data:001b

03:50df instrument_type_strings
03:50df .text:0006
03:50e5 .text:0006
03:50eb .text:0006
03:50f1 .text:0006

03:7cc6 instrument_param_strings
03:7cc6 .text:0004
03:7cca .text:0004
03:7cce .text:0004
03:7cd2 .text:0004
03:7cd6 .text:0004
03:7cda .text:0004
03:7cde .text:0004
03:7ce2 .text:0007
03:7ce9 .text:0004
03:7ced .text:0004
03:7cf1 .text:0004
03:7cf5 .text:0004
03:7cf9 .text:0004
03:7cfd .text:0004
03:7d01 .text:0004
03:7d05 .text:0004
03:7d09 .text:0007
03:7d10 .text:0004
03:7d14 .text:0004
03:7d18 .text:0004
03:7d1c .text:0004
03:7d20 .text:0004

03:7d24 .data:02dc

04:4011 .data:000a

04:412b .data:001b

04:47d4 .data:0004

04:48a5 .data:0003

04:48e8 .data:0004

04:4ca0 .data:0003

04:4f51 .data:0050

04:7a03 .data:0004

04:7a9c sync_strings_1
04:7a9c .text:0005
04:7aa1 .text:0005
04:7aa6 .text:0005
04:7aab .text:0005

04:7ae5 sync_strings_2
04:7ae5 .text:0005
04:7aea .text:0005
04:7aef .text:0005

04:7b57 sync_strings_3
04:7b57 .text:0005
04:7b5c .text:0005
04:7b61 .text:0005
04:7b66 .text:0005

04:7daf .data:0251

05:4269 .data:000d

05:4435 .data:0012

06:43b4 text_to_speech_screen_strings
06:43b4 .text:0006
06:43ba .text:0006

05:6aee .data:1512

06:4022 .data:0004

06:49ad .data:0010

06:4f52 .data:0011

06:4f63 wave_screen_title_string
06:4f63 .text:0006

06:50d7 .data:0011

06:596e .data:0006

06:5a4f .data:0003

06:5f24 .data:0004

06:7844 .data:07bc

07:4039 .data:000c

07:4970 .data:0003

07:5d87 .data:0400

07:6326 .data:0002

07:6904 digits_string
07:6904 .text:0011

07:6a51 .text:0005
07:6a56 .text:0005
07:6a5b .text:0005
07:6a60 .text:0005
07:6a65 .text:0005

07:67f2 .data:0100

07:6ff4 pulse_channel_combo_strings
07:6ff4 .text:0006
07:6ffa .text:0006
07:7000 .text:0006
07:7006 .text:0006
07:700c .text:0006
07:7012 .text:0006

07:730a keyboard_calibration_strings
07:730a .text:0015
07:731f .text:0013
07:7332 .text:0011
07:7343 .text:000b
07:734e .text:0006
07:7354 .text:0004

07:755c .data:0aa4

;; 1b:4000 Unknown dynamically-executed code related to samples
1b:4000 dynamic_call_samples

1b:4058 .data:0040

1b:4098 help_page_index_strings
1b:4098 .text:000f
1b:40a7 .text:000a
1b:40b1 .text:0005
1b:40b6 .text:0005
1b:40bb .text:0006
1b:40c1 .text:0007
1b:40c8 .text:0006
1b:40ce .text:0007
1b:40d5 .text:0005
1b:40db .text:000e
1b:40e9 .text:0011
1b:40f9 .text:000e

1b:4107 help_page_strings
1b:4107 .text:00cf
1b:41d6 .text:00aa
1b:4280 .text:00e5
1b:4365 .text:00e4
1b:4449 .text:00e1
1b:452a .text:004d
1b:4577 .text:007d
1b:45f4 .text:00ea
1b:46de .text:00ec
1b:47ca .text:0080

1b:4a05 .data:0014

1b:4ad9 data_keyboard_key_labels
1b:4ad9 .text:000b
1b:4ae4 .text:000b
1b:4aef .text:000b
1b:4afa .text:0006
1b:4b00 .data:0005

1b:5060 save_as_strings
1b:5060 .text:0009
1b:5069 .text:0006

1b:55a9 save_progress_strings
1b:55a9 .text:000a
1b:55b3 .text:0006
1b:55b9 .text:000f
1b:55c8 .text:0006
1b:55ce .text:0006

1b:563f data_font_1_name
1b:563f .text:0005
1b:5644 data_font_2_name
1b:5644 .text:0005
1b:5649 data_font_3_name
1b:5649 .text:0005

1b:564e data_dmg_palette_1_name
1b:564e .text:0005
1b:564e data_dmg_palette_2_name
1b:5653 .text:0005
1b:5658 .data:0014

1b:566c data_palette_1_name
1b:566c .text:0005
1b:5671 data_palette_2_name
1b:5671 .text:0005
1b:5676 data_palette_3_name
1b:5676 .text:0005
1b:567b data_palette_4_name
1b:567b .text:0005
1b:5680 data_palette_5_name
1b:5680 .text:0005
1b:5685 data_palette_6_name
1b:5685 .text:0005

1b:5688 .data:0028

1b:5786 .data:0003

1b:5908 project_screen_param_strings
1b:58de .text:0007
1b:58e5 .text:0007
1b:58ec .text:0007
1b:58f3 .text:0007
1b:58fa .text:0007
1b:5901 .text:0007
1b:5908 .text:000c
1b:5914 .text:000c
1b:5920 .text:000e

1b:5b22 .data:0003

1b:5b72 prelisten_strings
1b:5b72 .text:0004
1b:5b76 .text:0004
1b:5b7a .text:0004

1b:5c1f stat_strings
1b:5c1f .text:0009
1b:5c28 .text:000b

1b:5e51 project_screen_option_strings
1b:5e51 .text:0007
1b:5e58 .text:000b
1b:5e63 .text:0006
1b:5e69 .text:0007
1b:5e70 .text:0005
1b:5e75 .text:0005
1b:5e7a .text:0012
1b:5e8c .text:000b
1b:5e97 .text:0005
1b:5e9c .text:0010
1b:5eac .text:0011
1b:5ebd .text:000f
1b:5ecc .text:000d
1b:5ed9 .text:0006
1b:5edf .text:000d

1b:6c9b .data:0038

1b:7393 call_init_samples
;; 1b:7393 This function initializes some unknown dynamically-executed code and data related to samples
;; 1b:739d Write all of 1b:7451 into d000
;; 1b:73ae Copy code from 4000-401b plus extra instructions to memory 16 times
1b:73b2 .jump_copy_16x_loop
;; 1b:73ba Initialize "copy from" address
1b:73c3 .jump_copy_loop
;; 1b:73c3 Copy byte
;; 1b:73d5 Increment "copy to" address
;; 1b:73eb Increment "copy from" address
;; 1b:7401 Jump back if not done copying
;; 1b:741b Skip these instructions if on last loop
;; 1b:7423 Copy "inc c" instruction and increment "copy to" address.
1b:7431 .jump_copy_inc_c_instruction_end
;; 1b:7431 Copy "inc e" instruction and increment "copy to" address
1b:743f .jump_copy_inc_e_instruction_end
;; 1b:743f Increment loop counter and jump back
1b:7445 .jump_copy_16x_loop_end
;; 1b:7445 Copy "ret" instruction and clean up

1b:7451 .data:0baf

1c:4047 .data:0010

1c:43b9 .data:0008

1c:47a3 .data:000e

1c:4c11 .data:0009

1c:5092 .data:0006

1c:534e loading_progress_strings
1c:534e .text:000d
1c:535b .text:0006

1c:589e .data:000f

1c:5970 file_screen_strings
1c:5970 .text:0005
1c:5975 .text:0005
1c:597a .text:0006
1c:5980 .text:0011
1c:5991 .text:0003
1c:5994 .text:0003

1c:616f erase_file_strings
1c:616f .text:000d
1c:617c .text:0010
1c:618c .text:0011
1c:619d .text:0004
1c:61a1 .text:0003
1c:61a4 .text:0008
1c:61ac .text:0007
1c:61b3 .text:0004

1c:61b7 .data:0097

1c:64e1 .data:0062

1c:6678 .data:1988

1d:4058 .data:0002

1d:433d groove_screen_strings
1d:433d .text:0008
1d:4345 .text:000e
1d:4353 .text:0003
1d:4356 .text:0004
1d:435a .text:0005

1d:454b .data:0003

1d:50ca .data:02a0

1d:5df3 .data:0030

1d:5ff2 resync_type_strings
1d:5ff2 .text:0007
1d:5ff9 .text:0007
1d:6000 .text:0007

1d:60e6 filter_type_strings
1d:60e6 .text:0006
1d:60ec .text:0006
1d:60f2 .text:0006
1d:60f8 .text:0006
1d:60fe .text:0006
1d:6104 .text:0006

1d:617f .data:0016

1d:6320 distortion_type_strings
1d:6320 .text:0005
1d:6325 .text:0005
1d:632a .text:0005

1d:6713 wave_screen_strings
1d:6713 .text:0007
1d:671a .text:0007
1d:6721 .text:0007
1d:6728 .text:0005
1d:672d .text:0006
1d:6733 .text:0009
1d:673c .text:0003
1d:673f .text:0007
1d:6746 .text:0006
1d:674c .text:0007
1d:6753 .text:0006
1d:6759 .text:0007
1d:6760 .text:0003
1d:6763 .text:0003

1d:6c98 hand_drawn_waves_warning_strings
1d:6c98 .text:000a
1d:6ca2 .text:000b
1d:6cad .text:0007
1d:6cb4 .text:0004
1d:6cb8 .text:0003

1d:7b6a .data:0496

1e:42da .data:0062

1e:433c tileset
1e:433c .image:0300:w64

1e:463c .data:0082

1e:46be font_3_content
1e:46be .image:00470:w64
1e:4b2e .data:0a26
1e:5554 font_1_content
1e:5554 .image:00470:w64
1e:59c4 .data:0a26
1e:63ea font_2_content
1e:63ea .image:00470:w64
1e:685a .data:11b2

1e:7af0 .data:0510

1f:403e table_play_type_strings
1f:403e .text:0005
1f:4043 .text:0005
1f:4048 .text:0005

1f:4095 .text:0004

1f:40e2 kit_loop_type_strings
1f:40e2 .text:0004
1f:40e6 .text:0004
1f:40ea .text:0004

1f:41ea .data:0007

1f:434a instrument_length_strings
1f:434a .text:0006
1f:4350 .text:0004

1f:4426 noise_instrument_param_strings
1f:4426 .text:0006
1f:442c .text:0004
1f:4430 .text:0007
1f:4437 .text:0007

1f:46c4 .text:0004
1f:46c8 .text:0004
1f:46cc .text:0004
1f:46d0 .text:0004

1f:6184 dedup_song_strings
1f:6184 .text:000b
1f:618f .text:0009
1f:6198 .text:000b
1f:61a3 .text:0003
1f:61a6 .text:000b
1f:61b1 .text:0003
1f:61b4 .text:0004

1f:6268 dedup_instruments_strings
1f:6268 .text:000b
1f:6273 .text:0009
1f:627c .text:000b
1f:6287 .text:0003
1f:628a .text:000b
1f:6295 .text:0003
1f:6298 .text:000b
1f:62a3 .text:0003
1f:62a6 .text:0004

1f:63b1 .data:001e

1f:6b79 .data:0005

1f:7633 song_screen_instrument_window_strings
1f:7633 .text:0005
1f:7638 .text:0002
1f:763a .text:0002
1f:763c .text:0005
1f:7641 .text:0004

1f:7955 type_speech_string
1f:7955 .text:000e

1f:7feb .data:0015

; Memory

;; 00:c33f Indicates if sound was on at startup for DMG
00:c3ff DMG_SOUND_ON

00:cbb7 GB_MODEL

00:c53c CURRENT_PALETTE_NUM

;; 00:c8f5 Used to store reference to an address inside OAM/VRAM
00:c8f5 OAM_VRAM_ADDRESS
;; 00:c8f6 Used to store a value to write to OAM/VRAM
00:c8f6 OAM_VRAM_VALUE

;; 01:d480 Unknown dynamically-generated code related to samples
01:d480 DYNAMIC_SAMPLE_CODE

; Kits

08:4000 kit_1
08:4000 .data:4000
09:4000 kit_2
09:4000 .data:4000
0a:4000 kit_3
0a:4000 .data:4000
0b:4000 kit_4
0b:4000 .data:4000
0c:4000 kit_5
0c:4000 .data:4000
0d:4000 kit_6
0d:4000 .data:4000
0e:4000 kit_7
0e:4000 .data:4000
0f:4000 kit_8
0f:4000 .data:4000
10:4000 kit_9
10:4000 .data:4000
11:4000 kit_10
11:4000 .data:4000
12:4000 kit_11
12:4000 .data:4000
13:4000 kit_12
13:4000 .data:4000
14:4000 kit_13
14:4000 .data:4000
15:4000 kit_14
15:4000 .data:4000
16:4000 kit_15
16:4000 .data:4000
17:4000 kit_16
17:4000 .data:4000
18:4000 kit_17
18:4000 .data:4000
19:4000 kit_18
19:4000 .data:4000
1a:4000 kit_19
1a:4000 .data:4000

20:4000 kit_20
20:4000 .data:4000
21:4000 kit_21
21:4000 .data:4000
22:4000 kit_22
22:4000 .data:4000
23:4000 kit_23
23:4000 .data:4000
24:4000 kit_24
24:4000 .data:4000
25:4000 kit_25
25:4000 .data:4000
26:4000 kit_26
26:4000 .data:4000
27:4000 kit_27
27:4000 .data:4000
28:4000 kit_28
28:4000 .data:4000
29:4000 kit_29
29:4000 .data:4000
2a:4000 kit_30
2a:4000 .data:4000
2b:4000 kit_31
2b:4000 .data:4000
2c:4000 kit_32
2c:4000 .data:4000
2d:4000 kit_33
2d:4000 .data:4000
2e:4000 kit_34
2e:4000 .data:4000
2f:4000 kit_35
2f:4000 .data:4000
30:4000 kit_36
30:4000 .data:4000
31:4000 kit_37
31:4000 .data:4000
32:4000 kit_38
32:4000 .data:4000
33:4000 kit_39
33:4000 .data:4000
34:4000 kit_40
34:4000 .data:4000
35:4000 kit_41
35:4000 .data:4000
36:4000 kit_42
36:4000 .data:4000
37:4000 kit_43
37:4000 .data:4000
38:4000 kit_44
38:4000 .data:4000
39:4000 kit_45
39:4000 .data:4000
3a:4000 kit_46
3a:4000 .data:4000
3b:4000 kit_47
3b:4000 .data:4000
3c:4000 kit_48
3c:4000 .data:4000
3d:4000 kit_49
3d:4000 .data:4000
3e:4000 kit_50
3e:4000 .data:4000
3f:4000 kit_51
3f:4000 .data:4000
